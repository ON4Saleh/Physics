#include <SFML/Graphics.hpp>
#include <Box2D/Box2D.h>
#include <vector>
#include <cmath>
#include <iostream>
#include <memory>

// تعريف الثوابت
const float G = 1.0;          // ثابت الجذب العام
const float SUN_MASS = 10000.0f;  // كتلة الشمس
const float SUN_RADIUS = 50.0f;   // نصف قطر الشمس
const float MAX_TRAIL_SIZE = 300; // الحد الأقصى لطول المسار

// تعريف الكوكب
class Planet {
public:
    sf::CircleShape shape;          // شكل الكوكب
    b2Body* body;                   // جسم Box2D
    std::vector<sf::Vertex> trail;  // مسار الكوكب
    sf::CircleShape orbit;          // مدار الكوكب

    Planet(float radius, float x, float y, b2World* world) {
        shape.setRadius(radius);
        shape.setFillColor(sf::Color::Green);
        shape.setOrigin(radius, radius);  // تحديد نقطة الأصل في مركز الكوكب
        shape.setPosition(x, y);

        // إعداد جسم Box2D
        b2BodyDef bodyDef;
        bodyDef.type = b2_dynamicBody;
        bodyDef.position.Set(x, y);

        body = world->CreateBody(&bodyDef);

        b2CircleShape circleShape;
        circleShape.m_radius = radius;

        b2FixtureDef fixtureDef;
        fixtureDef.shape = &circleShape;
        fixtureDef.density = 10.0f;  // كثافة الكوكب
        fixtureDef.friction = 0.3f;

        body->CreateFixture(&fixtureDef);

        // رسم المدار (دائرة حول الشمس)
        orbit.setRadius(std::sqrt(std::pow(x - 400, 2) + std::pow(y - 300, 2)));
        orbit.setFillColor(sf::Color::Transparent);
        orbit.setOutlineColor(sf::Color(255, 255, 255, 50));  // لون شفاف
        orbit.setOutlineThickness(1);
        orbit.setOrigin(orbit.getRadius(), orbit.getRadius());
        orbit.setPosition(400, 300);
    }

    void update() {
        shape.setPosition(body->GetPosition().x, body->GetPosition().y);
        trail.push_back(sf::Vertex(shape.getPosition(), sf::Color::Green));
        if (trail.size() > MAX_TRAIL_SIZE) {
            trail.erase(trail.begin());
        }
    }

    bool isCloseToSun(const sf::Vector2f& sunPosition, float threshold) const {
        float distance = std::sqrt(std::pow(shape.getPosition().x - sunPosition.x, 2) +
            std::pow(shape.getPosition().y - sunPosition.y, 2));
        return distance < threshold;
    }

    void drawOrbit(sf::RenderWindow& window) const {
        window.draw(orbit);
    }
};

// حساب السرعة الأولية للكوكب
b2Vec2 calculateInitialVelocity(b2Vec2 position, b2Vec2 sunPosition) {
    b2Vec2 direction = position - sunPosition;
    float distance = direction.Length();

    if (distance == 0) {
        return b2Vec2(0, 0);
    }

    direction.Normalize();
    float velocityMagnitude = std::sqrt(G * SUN_MASS / distance);

    // السرعة عمودية على القوة الجاذبية
    b2Vec2 perpendicular(-direction.y, direction.x);  // تدوير 90 درجة
    perpendicular.Normalize();
    perpendicular *= velocityMagnitude;  // ضرب المتجه في السرعة المطلوبة

    return perpendicular;
}

// تطبيق الجاذبية بين الشمس والكواكب
void applyGravity(Planet& planet, const sf::Vector2f& sunPosition) {
    b2Vec2 sunPos(sunPosition.x, sunPosition.y);
    b2Vec2 direction = sunPos - planet.body->GetPosition();
    float distance = direction.Length();

    if (distance > SUN_RADIUS) {
        direction.Normalize();
        // حساب القوة باستخدام قانون الجذب العام
        // حساب القوة باستخدام قانون الجذب العام
        float forceMagnitude = (G * planet.body->GetMass() * SUN_MASS) / (distance * distance);
        direction *= forceMagnitude;  // ضرب المتجه في القوة
        planet.body->ApplyForceToCenter(direction, true);  // تطبيق القوة على جسم الكوكب


    }
}

std::vector<std::shared_ptr<Planet>> planets;

int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "Solar System Simulation");

    b2Vec2 gravity(0.0f, 0.0f);
    b2World world(gravity);

    sf::CircleShape sun(SUN_RADIUS);
    sun.setFillColor(sf::Color::Yellow);
    sun.setOrigin(SUN_RADIUS, SUN_RADIUS);
    sun.setPosition(400, 300);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
            if (event.type == sf::Event::MouseButtonPressed && event.mouseButton.button == sf::Mouse::Left) {
                sf::Vector2i mousePos = sf::Mouse::getPosition(window);
                float distanceToSun = std::sqrt(std::pow(mousePos.x - 400, 2) + std::pow(mousePos.y - 300, 2));

                if (distanceToSun > SUN_RADIUS) {
                    auto newPlanet = std::make_shared<Planet>(10, mousePos.x, mousePos.y, &world);
                    b2Vec2 velocity = calculateInitialVelocity(newPlanet->body->GetPosition(), b2Vec2(400, 300));
                    newPlanet->body->SetLinearVelocity(velocity);
                    planets.push_back(newPlanet);
                }
            }
        }

        world.Step(1.0f / 60.0f, 6, 2);

        window.clear();
        window.draw(sun);

        for (auto it = planets.begin(); it != planets.end();) {
            applyGravity(**it, sf::Vector2f(400, 300));
            (*it)->update();

            if ((*it)->isCloseToSun(sf::Vector2f(400, 300), SUN_RADIUS + 10)) {
                world.DestroyBody((*it)->body);
                it = planets.erase(it);
            }
            else {
                (*it)->drawOrbit(window);
                window.draw((*it)->shape);
                window.draw(&(*it)->trail[0], (*it)->trail.size(), sf::LinesStrip);
                ++it;
            }
        }

        window.display();
    }

    return 0;
}
